nlab = 8;
# Calculate the means of each class
G_means = matrix(nr = nlab, nc = neur)
for (i in 1:nlab){
G_means[i,] = colMeans(vecs[labels==i,])
}
# Calculate the shared covariance
G_cov = matrix(0,97,97)
for (i in 1:train_trials){
G_cov = G_cov+(vecs[i,]-G_means[labels[i],])%*%t(vecs[i,]-G_means[labels[i],])
}
G_cov = G_cov/ train_trials
# try it out on training data
assigned_label <- matrix(0, train_trials)
for (i in 1:train_trials){
prob = 0
for (class in 1:nlabs){
prob_temp = dmvnorm(vecs[i,], mean = G_means[class,], sigma = G_cov)
if (prob_temp > prob){
prob = prob_temp
assigned_label[i] = class
}
}
}
Gauss_SharedCov_Train_Error = sum(assigned_label != labels)/train_trials
# try it out on testing data
assigned_label <- matrix(0, test_trials)
for (i in 1:test_trials){
prob = 0
for (class in 1:nlabs){
prob_temp = dmvnorm(test_vecs[i,], mean = G_means[class,], sigma = G_cov)
if (prob_temp > prob){
prob = prob_temp
assigned_label[i] = class
}
}
}
Gauss_SharedCov_Test_Error = sum(assigned_label != labels)/test_trials
# Classification: Gaussian generative --------
nlab = 8;
# Calculate the means of each class
G_means = matrix(nr = nlab, nc = neur)
for (i in 1:nlab){
G_means[i,] = colMeans(vecs[labels==i,])
}
# Calculate the shared covariance
G_cov = matrix(0,97,97)
for (i in 1:train_trials){
G_cov = G_cov+(vecs[i,]-G_means[labels[i],])%*%t(vecs[i,]-G_means[labels[i],])
}
G_cov = G_cov/ train_trials
# try it out on training data
assigned_label <- matrix(0, train_trials)
for (i in 1:train_trials){
prob = 0
for (class in 1:nlab){
prob_temp = dmvnorm(vecs[i,], mean = G_means[class,], sigma = G_cov)
if (prob_temp > prob){
prob = prob_temp
assigned_label[i] = class
}
}
}
Gauss_SharedCov_Train_Error = sum(assigned_label != labels)/train_trials
# try it out on testing data
assigned_label <- matrix(0, test_trials)
for (i in 1:test_trials){
prob = 0
for (class in 1:nlab){
prob_temp = dmvnorm(test_vecs[i,], mean = G_means[class,], sigma = G_cov)
if (prob_temp > prob){
prob = prob_temp
assigned_label[i] = class
}
}
}
Gauss_SharedCov_Test_Error = sum(assigned_label != labels)/test_trials
G_cov = matrix(0,nlab,97,97)
for (i in 1:train_trials){
G_cov[labels[i],] = G_cov[labels[i],]+(vecs[i,]-G_means[labels[i],])%*%t(vecs[i,]-G_means[labels[i],])
}
dim(G_cov[labels[i],])
G_cov[labels[i],]
G_cov[labels[i],,]
G_cov = matrix(0,nlab,97,97)
G_cov = matrix(0,c(nlab,97,97))
G_cov = array(0,nlab,97,97)
G_cov = array(0,nlab,97,97)
G_cov = array(0,dim=c(nlab,97,97))
for (i in 1:train_trials){
G_cov[labels[i],] = G_cov[labels[i],]+(vecs[i,]-G_means[labels[i],])%*%t(vecs[i,]-G_means[labels[i],])
}
dim(G_cov[labels[i],])
dim(G_cov[labels[i],,])
G_cov = array(0,dim=c(nlab,97,97))
for (i in 1:train_trials){
G_cov[labels[i],,] = G_cov[labels[i],,]+(vecs[i,]-G_means[labels[i],])%*%t(vecs[i,]-G_means[labels[i],])
}
G_cov = G_cov/ train_trials
clear
# Data loading and prep ---------
# load libaries and read data
library("R.matlab")
library('mvtnorm')
dat = readMat('ps3_realdata.mat')
# Sum up the # of spikes in the relevant time frame for each trial
neur = 97
train_trials = 728
test_trials = 728
# training data
vecs = matrix(nr =length(dat$train.trial)/2, nc = neur)
for (i in seq(2,length(dat$train.trial),2)){
vecs[i/2,] = rowSums(dat$train.trial[i][[1]][,351:550])
}
labels = rep(1:8, each = 91)
nlab = 8
# testing data
test_vecs = matrix(nr =length(dat$test.trial)/2, nc = neur)
for (i in seq(2,length(dat$test.trial),2)){
test_vecs[i/2,] = rowSums(dat$test.trial[i][[1]][,351:550])
}
# Classification: Gaussian generative shared cov--------
nlab = 8;
# Calculate the means of each class
G_means = matrix(nr = nlab, nc = neur)
for (i in 1:nlab){
G_means[i,] = colMeans(vecs[labels==i,])
}
# Calculate the shared covariance
G_cov = matrix(0,97,97)
for (i in 1:train_trials){
G_cov = G_cov+(vecs[i,]-G_means[labels[i],])%*%t(vecs[i,]-G_means[labels[i],])
}
G_cov = G_cov/ train_trials
# try it out on training data
assigned_label <- matrix(0, train_trials)
for (i in 1:train_trials){
prob = 0
for (class in 1:nlab){
prob_temp = dmvnorm(vecs[i,], mean = G_means[class,], sigma = G_cov)
if (prob_temp > prob){
prob = prob_temp
assigned_label[i] = class
}
}
}
Gauss_SharedCov_Train_Error = sum(assigned_label != labels)/train_trials
# try it out on testing data
Gauss_SharedCov_assigned_label <- matrix(0, test_trials)
for (i in 1:test_trials){
prob = 0
for (class in 1:nlab){
prob_temp = dmvnorm(test_vecs[i,], mean = G_means[class,], sigma = G_cov)
if (prob_temp > prob){
prob = prob_temp
Gauss_SharedCov_assigned_label[i] = class
}
}
}
Gauss_SharedCov_Test_Error = sum(Gauss_SharedCov_assigned_label != labels)/test_trials
# Classification: Gaussian generative separate covs--------
nlab = 8;
# Calculate the means of each class
G_means = matrix(nr = nlab, nc = neur)
for (i in 1:nlab){
G_means[i,] = colMeans(vecs[labels==i,])
}
# Calculate the covariance of each class
G_cov = array(0,dim=c(nlab,97,97))
for (i in 1:train_trials){
G_cov[labels[i],,] = G_cov[labels[i],,]+(vecs[i,]-G_means[labels[i],])%*%t(vecs[i,]-G_means[labels[i],])
}
G_cov = G_cov/ train_trials
# try it out on training data
assigned_label <- matrix(0, train_trials)
for (i in 1:train_trials){
prob = 0
for (class in 1:nlab){
prob_temp = dmvnorm(vecs[i,], mean = G_means[class,], sigma = G_cov[class,,])
if (prob_temp > prob){
prob = prob_temp
assigned_label[i] = class
}
}
}
Gauss_SeparateCov_Train_Error = sum(assigned_label != labels)/train_trials
# try it out on testing data
Gauss_SeparateCov_assigned_label <- matrix(0, test_trials)
for (i in 1:test_trials){
prob = 0
for (class in 1:nlab){
prob_temp = dmvnorm(test_vecs[i,], mean = G_means[class,], sigma = G_cov[class,,])
if (prob_temp > prob){
prob = prob_temp
Gauss_SeparateCov_assigned_label[i] = class
}
}
}
Gauss_SeparateCov_Test_Error = sum(Gauss_SeparateCov_assigned_label != labels)/test_trials
# Classification: k nearest-neighbor ---------
# Choose k using training data
distance <- as.matrix(dist(vecs)) # calculate distances
nearest <- matrix(0,train_trials, train_trials)
for (i in 1:train_trials){
nearest[i,] = sort(distance[i,], index.return = TRUE)$ix # figure out nearest other points
}
assigned_label <- matrix(0, train_trials)
tie_count = matrix(0,100)
errors = matrix(0,100)
for (k in 1:100){
for (i in 1:train_trials){
near_labels <- table(as.vector(labels[nearest[i,2:(k+1)]])) # take k nearest points
temp=as.numeric(names(near_labels)[near_labels == max(near_labels)]); # majority vote
if (length(temp) > 1){
tie_count[k] = tie_count[k]+1
temp = temp[sample(c(1:length(temp)),1)] # if there's a tie, randomly break it
}
assigned_label[i] = temp;
}
errors[k] = sum(assigned_label != labels) # calculate error rate
}
# Choose the K with the least number of errors and ties
k <- which.min(tie_count+errors)
KNN_Train_Error = errors[k]/train_trials # Final train error
# Try out on test data
temp_matrix <- matrix(0, train_trials+1, neur)
KNN_assigned_label <- matrix(0, test_trials)
temp_matrix[1:train_trials, ] <- vecs
tie_count = 0
for (i in 1:test_trials){
temp_matrix[train_trials+1,] <- t(as.matrix(test_vecs[i,]))
distance <- as.matrix(dist(temp_matrix))[train_trials+1,] # calculate the distance to training points
nearest <- sort(distance, index.return = TRUE)$ix # find k nearest training points
near_labels <- table(as.vector(labels[nearest[2:(k+1)]]))
temp=as.numeric(names(near_labels)[near_labels == max(near_labels)]); # majority vote
if (length(temp) > 1){
tie_count = tie_count+1
temp = temp[sample(c(1:length(temp)),1)] # randomly break ties
}
KNN_assigned_label[i] = temp;
}
plot(jitter(KNN_assigned_label,1), jitter(labels,1)) # plot confusion
KNN_Test_Error=sum(KNN_assigned_label != labels)/test_trials # Final test error
plot(jitter(KNN_assigned_label,1), jitter(labels,1), 'col' = 1) # plot confusion
plot(jitter(KNN_assigned_label,1), jitter(labels,1), 'col' = 2) # plot confusion
plot(jitter(Gaussian_SharedCov_assigned_label,1), jitter(labels,1), 'col' = 3) # plot confusion
plot(jitter(Gauss_SeparateCov_assigned_label,1), jitter(labels,1), 'col' = 4) # plot confusion
plot(jitter(Gauss_SharedCov_assigned_label,1), jitter(labels,1), 'col' = 3) # plot confusion
plot(jitter(Gauss_SeparateCov_assigned_label,1), jitter(labels,1), 'col' = 4) # plot confusion
plot(jitter(KNN_assigned_label,1), jitter(labels,1), 'col' = 2) # plot confusion
points(jitter(Gauss_SharedCov_assigned_label,1), jitter(labels,1), 'col' = 3) # plot confusion
plot(jitter(KNN_assigned_label,1), jitter(labels,1), 'col' = 2, 'pch'=1) # plot confusion
plot(jitter(KNN_assigned_label,1), jitter(labels,1), 'col' = 2, 'pch'=2) # plot confusion
plot(jitter(KNN_assigned_label,1), jitter(labels,1), 'col' = 2, 'pch'=3) # plot confusion
plot(jitter(KNN_assigned_label,1), jitter(labels,1), 'col' = 2, 'pch'=4) # plot confusion
plot(jitter(KNN_assigned_label,1), jitter(labels,1), 'col' = 2, 'pch'=5) # plot confusion
plot(jitter(KNN_assigned_label,1), jitter(labels,1), 'col' = 2, 'pch'=6) # plot confusion
plot(jitter(KNN_assigned_label,1), jitter(labels,1), 'col' = 2, 'pch'=7) # plot confusion
plot(jitter(KNN_assigned_label,1), jitter(labels,1), 'col' = 2, 'pch'=8) # plot confusion
plot(jitter(KNN_assigned_label,1), jitter(labels,1), 'col' = 2, 'pch'='.') # plot confusion
plot(jitter(KNN_assigned_label,1), jitter(labels,1), 'col' = 2, 'pch'='.') # plot confusion
points(jitter(Gauss_SharedCov_assigned_label,1), jitter(labels,1), 'col' = 3, 'pch'='.') # plot confusion
plot(jitter(KNN_assigned_label,1), jitter(labels,1), 'col' = 2, 'pch'=19) # plot confusion
plot(jitter(KNN_assigned_label,1), jitter(labels,1), 'col' = 2, 'pch'=20) # plot confusion
plot(jitter(KNN_assigned_label,1), jitter(labels,1), 'col' = 2, 'pch'=16) # plot confusion
plot(jitter(KNN_assigned_label,1), jitter(labels,1), 'col' = 2, 'pch'=16, 'cex=0.1') # plot confusion
plot(jitter(KNN_assigned_label,1), jitter(labels,1), 'col' = 2, 'pch'=16, 'cex'=0.1) # plot confusion
plot(jitter(KNN_assigned_label,1), jitter(labels,1), 'col' = 2, 'pch'=16, 'cex'=0.5) # plot confusion
points(jitter(Gauss_SharedCov_assigned_label,1), jitter(labels,1), 'col' = 3, ''pch'=16, 'cex'=0.5) # plot confusion
plot(jitter(KNN_assigned_label,1), jitter(labels,1), 'col' = 2, 'pch'=16, 'cex'=0.5) # plot confusion
points(jitter(Gauss_SharedCov_assigned_label,1), jitter(labels,1), 'col' = 3, ''pch'=16, 'cex'=0.5) # plot confusion
plot(jitter(KNN_assigned_label,1), jitter(labels,1), 'col' = 2, 'pch'=16, 'cex'=0.5) # plot confusion
points(jitter(Gauss_SharedCov_assigned_label,1), jitter(labels,1), 'col' = 3, 'pch'=16, 'cex'=0.5) # plot confusion
plot(jitter(KNN_assigned_label,1), jitter(labels,1), 'col' = 2, 'pch'=4, 'cex'=0.5) # plot confusion
points(jitter(Gauss_SharedCov_assigned_label,1), jitter(labels,1), 'col' = 3, 'pch'=4, 'cex'=0.5) # plot confusion
points(jitter(Gauss_SharedCov_assigned_label,1), jitter(labels,1), 'col' = 3, 'pch'=0, 'cex'=0.5) # plot confusion
plot(jitter(KNN_assigned_label,1), jitter(labels,1), 'col' = 2, 'pch'=0, 'cex'=0.5) # plot confusion
points(jitter(Gauss_SharedCov_assigned_label,1), jitter(labels,1), 'col' = 3, 'pch'=0, 'cex'=0.5) # plot confusion
plot(jitter(KNN_assigned_label,1), jitter(labels,1), 'col' = 2, 'pch'=19, 'cex'=0.5) # plot confusion
points(jitter(Gauss_SharedCov_assigned_label,1), jitter(labels,1), 'col' = 3, 'pch'=19, 'cex'=0.5) # plot confusion
plot(jitter(KNN_assigned_label,1), jitter(labels,2), 'col' = 2, 'pch'=19, 'cex'=0.5) # plot confusion
points(jitter(Gauss_SharedCov_assigned_label,2), jitter(labels,1), 'col' = 3, 'pch'=19, 'cex'=0.5) # plot confusion
plot(jitter(KNN_assigned_label,2), jitter(labels,2), 'col' = 2, 'pch'=19, 'cex'=0.5) # plot confusion
points(jitter(Gauss_SharedCov_assigned_label,2), jitter(labels,2), 'col' = 3, 'pch'=19, 'cex'=0.5) # plot confusion
points(jitter(Gauss_SeparateCov_assigned_label,2), jitter(labels,2), 'col' = 4, 'pch'=19, 'cex'=0.5) # plot confusion
points(jitter(Gauss_SeparateCov_assigned_label,2), jitter(labels,2), 'col' = 4, 'pch'=19, 'cex'=0.5) # plot confusion
plot(jitter(Gauss_SeparateCov_assigned_label,2), jitter(labels,2), 'col' = 4, 'pch'=19, 'cex'=0.5)
assigned_label <- matrix(0, train_trials)
for (i in 1:train_trials){
prob = 0
for (class in 1:nlab){
print(class)
prob_temp = dmvnorm(vecs[i,], mean = G_means[class,], sigma = G_cov[class,,])
if (prob_temp > prob){
prob = prob_temp
assigned_label[i] = class
}
}
}
assigned_label <- matrix(0, train_trials)
for (i in 1:train_trials){
prob = 0
for (class in 1:nlab){
prob_temp = dmvnorm(vecs[i,], mean = G_means[class,], sigma = G_cov[class,,])
if (prob_temp > prob){
prob = prob_temp
assigned_label[i] = class
}
}
}
View(assigned_label)
# try it out on training data------
assigned_label <- matrix(0, train_trials)
for (i in 1:1){#train_trials){
prob = 0
for (class in 1:nlab){
prob_temp = dmvnorm(vecs[i,], mean = G_means[class,], sigma = G_cov[class,,])
if (prob_temp > prob){
prob = prob_temp
assigned_label[i] = class
}
}
}
Gauss_SeparateCov_Train_Error = sum(assigned_label != labels)/train_trials
plot(G_cov[1,,])
image(G_cov[1,,])
image(G_cov[2,,])
image(G_cov[3,,])
image(G_cov[4,,])
image(G_cov[5,,])
image(G_cov[6,,])
image(G_cov[,,])
image(G_cov[7,,])
image(G_cov[8,,])
sum(labels == 1)
sum(labels == 2)
G_cov = array(0,dim=c(nlab,97,97))
for (i in 1:train_trials){
G_cov[labels[i],,] = G_cov[labels[i],,]+(vecs[i,]-G_means[labels[i],])%*%t(vecs[i,]-G_means[labels[i],])
}
G_cov = G_cov/91
# try it out on training data------
assigned_label <- matrix(0, train_trials)
for (i in 1:1){#train_trials){
prob = 0
for (class in 1:nlab){
prob_temp = dmvnorm(vecs[i,], mean = G_means[class,], sigma = G_cov[class,,])
if (prob_temp > prob){
prob = prob_temp
assigned_label[i] = class
}
}
}
Gauss_SeparateCov_Train_Error = sum(assigned_label != labels)/train_trials
# try it out on training data------
assigned_label <- matrix(0, train_trials)
for (i in 1:train_trials){
prob = 0
for (class in 1:nlab){
prob_temp = dmvnorm(vecs[i,], mean = G_means[class,], sigma = G_cov[class,,])
if (prob_temp > prob){
prob = prob_temp
assigned_label[i] = class
}
}
}
Gauss_SeparateCov_Train_Error = sum(assigned_label != labels)/train_trials
# try it out on training data------
assigned_label <- matrix(0, train_trials)
for (i in 1:1){#train_trials){
prob = 0
for (class in 1:nlab){
prob_temp = dmvnorm(vecs[i,], mean = G_means[class,], sigma = G_cov[class,,])
print(prob_temp)
if (prob_temp > prob){
prob = prob_temp
assigned_label[i] = class
}
}
}
Gauss_SeparateCov_Train_Error = sum(assigned_label != labels)/train_trials
G_cov = array(0,dim=c(nlab,97,97))
for (i in 1:train_trials){
G_cov[labels[i],,] = G_cov[labels[i],,]+(vecs[i,]-G_means[labels[i],])%*%t(vecs[i,]-G_means[labels[i],])
}
assigned_label <- matrix(0, train_trials)
# try it out on training data------
assigned_label <- matrix(0, train_trials)
for (i in 1:1){#train_trials){
prob = 0
for (class in 1:nlab){
prob_temp = dmvnorm(vecs[i,], mean = G_means[class,], sigma = G_cov[class,,])
print(prob_temp)
if (prob_temp > prob){
prob = prob_temp
assigned_label[i] = class
}
}
}
Gauss_SeparateCov_Train_Error = sum(assigned_label != labels)/train_trials
dmvnorm(vecs[i,], mean = G_means[class,], sigma = G_cov[class,,])
dmvnorm(vecs[1,], mean = G_means[1,], sigma = G_cov[1,,])
G_cov = matrix(0,97,97)
for (i in 1:train_trials){
G_cov = G_cov+(vecs[i,]-G_means[labels[i],])%*%t(vecs[i,]-G_means[labels[i],])
}
G_cov = G_cov/ train_trials
dmvnorm(vecs[1,], mean = G_means[1,], sigma = G_cov)
reduced_dim = svd(vecs)
plot(d)
rd = svd(vecs)
plot(rd$d)
test(1)
test_fxn(1)
source('text_fxn.R')
source('text_fxn')
getwd
getwd()
source("text_fxn")
source("text_fxn.R")
source("nora6.R")
source("test_fxn.R")
test(1)
dim(vecs)
dim(vecs)[1]
dim(vecs)[2]
trials/8
train_trials/8
dim(dim(vecs))
length(dim(vecs))
fit = gauss_fit(vecs, 8)
source('gauss_class.R')
source('gauss_class.R')
fit = gauss_fit(vecs, 8)
source('gauss_class.R')
fit = gauss_fit(vecs, 8)
# Classification: Gaussian generative shared cov--------
nlab = 8;
# Calculate the means of each class
G_means = matrix(nr = nlab, nc = neur)
for (i in 1:nlab){
G_means[i,] = colMeans(vecs[labels==i,])
}
# Calculate the shared covariance
G_cov = matrix(0,97,97)
for (i in 1:train_trials){
G_cov = G_cov+(vecs[i,]-G_means[labels[i],])%*%t(vecs[i,]-G_means[labels[i],])
}
G_cov = G_cov/ train_trials
# try it out on training data
assigned_label <- matrix(0, train_trials)
for (i in 1:train_trials){
prob = 0
for (class in 1:nlab){
prob_temp = dmvnorm(vecs[i,], mean = G_means[class,], sigma = G_cov)
if (prob_temp > prob){
prob = prob_temp
assigned_label[i] = class
}
}
}
Gauss_SharedCov_Train_Error = sum(assigned_label != labels)/train_trials
# try it out on testing data
Gauss_SharedCov_assigned_label <- matrix(0, test_trials)
for (i in 1:test_trials){
prob = 0
for (class in 1:nlab){
prob_temp = dmvnorm(test_vecs[i,], mean = G_means[class,], sigma = G_cov)
if (prob_temp > prob){
prob = prob_temp
Gauss_SharedCov_assigned_label[i] = class
}
}
}
Gauss_SharedCov_Test_Error = sum(Gauss_SharedCov_assigned_label != labels)/test_trials
plot(fit$mean, G_means)
plot(fit$cov, G_cov)
fit = gauss_fit(vecs, 8, FALSE)
plot(fit$mean, G_means)
G_cov = array(0,dim=c(nlab,97,97))
for (i in 1:train_trials){
G_cov[labels[i],,] = G_cov[labels[i],,]+(vecs[i,]-G_means[labels[i],])%*%t(vecs[i,]-G_means[labels[i],])
}
plot(G_cov, fit$cov)
G_cov = G_cov/91
plot(G_cov, fit$cov)
source(knn_class)
source("knn_class.R")
source("knn_class.R")
knn_test(test_vecs, vecs, labels)
choose_k, vecs, labels
choose_k(vecs, labels)
# Classification: k nearest-neighbor ---------
# choose k using training data
train = choose_k(vecs, labels)
KNN_Train_Error = train$error
# try it out on test data
KNN_assigned_label = knn_test(test_vecs, vecs, labels, k = train$k)
KNN_Test_Error=sum(KNN_assigned_label != labels)/test_trials # Final test error
plot(jitter(KNN_assigned_label,2), jitter(labels,2), 'col' = 2, 'pch'=19, 'cex'=0.5) # plot confusion
points(jitter(Gauss_SharedCov_assigned_label,2), jitter(labels,2), 'col' = 3, 'pch'=19, 'cex'=0.5)
plot(jitter(Gauss_SeparateCov_assigned_label,2), jitter(labels,2), 'col' = 4, 'pch'=19, 'cex'=0.5)
plot(jitter(Gauss_SeparateCov_assigned_label,2), jitter(labels,2), 'col' = 4, 'pch'=19, 'cex'=0.5)
plot(jitter(KNN_assigned_label,2), jitter(labels,2), 'col' = 2, 'pch'=19, 'cex'=0.5) # plot confusion
points(jitter(Gauss_SharedCov_assigned_label,2), jitter(labels,2), 'col' = 3, 'pch'=19, 'cex'=0.5)
Gauss_SeparateCov_Test_Error
Gauss_SharedCov_Test_Error
Gauss_KNN_Test_Error
KNN_Test_Error
plot(fit$mean[1,])
points(fit$mean[2,])
dim(fit$mean)
