library(R.matlab)
setwd("~/github/stat312")
readMat('/home/snarles/stat312data/spike_dat.mat')
ls()
names(myself)
dat <- readMat('/home/snarles/stat312data/spike_dat.mat')
names(dat)
trial <- dat$trial
names(trial)
class(trial)
dim(trial)
trial[1,1,1]
attrs(trial)
attr(trial)
names(trial)
names(dat)
trial[2,1,1]
plot(trial[2,1,1])
plot(as.vector(trial[2,1,1]))
names(trial[2,1,1])
plot(trial[2,1,1]$spikes)
trial[2,1,1]$spikes
as.vector(trial[2,1,1]$spikes)
angles <- c(30, 70, 110, 150, 190, 230, 310, 350)/180 * pi
temp <- trial[2, , ]
dim(temp)
apply(temp, c(1,2), function(x) {as.vector(x$spikes)})
length(as.vector(trial[2, 1 ,1]$spikes))
spikes <- array(0, c(8, 182, 500))
spikes <- array(0, c(8, 182, 500))
for (i in 1:8) {
for (j in 1:182) {
spikes[i, j, ] = as.vector(trial[2, j, i]$spikes)
}
}
plot(spikes[1, 2, ])
plot(spikes[1, 3, ])
plot(spikes[1, 4, ])
meanrates <- apply(spikes, 1, mean)
dim(meanrates)
meanrates
plot(angles, meanrates)
plot(angles, meanrates, type='o')
meanrates <- apply(spikes, 1, mean)
plot(angles, meanrates, type='l')
for (k in 1:8) {
text(angles[k], meanrates[k], paste(k))
}
title("Mean rate per k")
title("Mean firing rate (per 1ms) per k")
meanrates <- apply(spikes, 1, mean)
plot(angles, meanrates, type='l', ylab = "spikes per ms", xlab = "reaching angle (radians)")
for (k in 1:8) {
text(angles[k], meanrates[k], paste(k))
}
title("Mean firing rate per k")
x <- spikes[6, , ]
binmat <- diag(rep(1, 100)) %x% matrix(1, 1, 5)
dim(binmat)
binmat <- matrix(1, 1, 5) %x% diag(rep(1, 100))
dim(binmat)
binmat <- matrix(1, 5, 1) %x% diag(rep(1, 100))
dim(binmat)
binmat[1,]
binmat[, 1]
dim(binmat)
binmat <- diag(rep(1, 100)) %x% matrix(1, 5, 1)
dim(binmat)
binmat[, 1]
binned <- x %*% binmat
plot(binned[1,])
plot(x[1,])
plot(binned[1,])
table(as.vector(binned))
x <- spikes[6, , ]
binwidth = 5
binmat <- diag(rep(1, 500/binwidth)) %x% matrix(1, binwidth, 1)
dim(binmat)
binned <- x %*% binmat
table(as.vector(binned))
binwidth = 10
binmat <- diag(rep(1, 500/binwidth)) %x% matrix(1, binwidth, 1)
dim(binmat)
binned <- x %*% binmat
table(as.vector(binned))
x <- spikes[6, , ]
binwidth = 5
binmat <- diag(rep(1, 500/binwidth)) %x% matrix(1, binwidth, 1)
dim(binmat)
binned <- x %*% binmat
table(as.vector(binned))
binned[binned > 1] <- 1
plot(binned[10,])
create_ar_matrix <- function(x, order) {
n <- length(x) - order
ans <- matrix(n, order)
for (i in 1:n) {
ans[i, ] <- x[i:(i+order - 1)]
}
ans
}
create_ar_matrix(x[1,], 20)
create_ar_matrix <- function(x, order) {
n <- length(x) - order
ans <- matrix(0, n, order)
for (i in 1:n) {
ans[i, ] <- x[i:(i+order - 1)]
}
ans
}
create_ar_matrix(x[1,], 20)
create_ar_matrix(x[1,], 10)
expanded <- apply(binned, 1, function(v) create_ar_matrix(v, order))
ord <- 10 # order of the autoregressive model by bins
expanded <- apply(binned, 1, function(v) create_ar_matrix(v, ord))
dim(expanded)
create_ar_matrix <- function(x, order) {
n <- length(x) - order
ans <- matrix(0, n, order)
for (i in 1:n) {
ans[i, ] <- reverse(x[i:(i+order - 1)])
}
ans
}
expanded <- apply(binned, 1, function(v) create_ar_matrix(v, ord))
dim(expanded)
binned[binned > 1] <- 1
ord <- 10 # order of the autoregressive model by bins
create_ar_matrix <- function(x, order) {
n <- length(x) - order
ans <- matrix(0, n, order)
for (i in 1:n) {
ans[i, ] <- rev(x[i:(i+order - 1)])
}
ans
}
expanded <- apply(binned, 1, function(v) create_ar_matrix(v, ord))
dim(expanded)
help(glm)
res <- glm(expanded[, 1] ~ expanded[, -1], family = binomial)
library(glmnet)
res <- cv.glmnet(expanded[, 1] ~ expanded[, -1], family = binomial)
help(cv.glmnet)
help(glmnet)
res <- cv.glmnet(expanded[, 1] ~ expanded[, -1], family = binomial)
res <- cv.glmnet(expanded[, -1], expanded[, 1] family = binomial)
res <- cv.glmnet(expanded[, -1], expanded[, 1], family = binomial)
res <- cv.glmnet(expanded[, -1], expanded[, 1], family = "binomial")
plot(res)
temp <- apply(x, 1, function(v) which(v==1))
temp[1:3]
temp <- lapply(temp, 1, function(v) -v[-1] +v[-length(v)])
temp <- lapply(temp, function(v) -v[-1]+v[-length(v)] )
temp[1]
temp <- apply(x, 1, function(v) which(v==1))
temp <- lapply(temp, function(v) v[-1]-v[-length(v)] )
temp[1]
unlist(temp)
isi_s <- unlist(temp)
```{r, fig.width=5, fig.height=3}
hist(isi_s)
```
Histogram vs poisson fit
help(hist)
max(isi_s)
0:300:10
0:10:300
seq(0, 300, 10)
hist(isi_s, breaks = seq(0, 300, 10))
hist(isi_s, breaks = seq(0, 310, 10))
mean(isi_s)
dexp(1:10, 44)
lines(1:310, dexp(1:310, lhat))
lhat <- mean(isi_s)
lines(1:310, dexp(1:310, lhat))
scaling <- length(isi_s) / 10
lines(1:310, scaling * dexp(1:310, lhat))
scaling * dexp(1:310, lhat)
help(dexp)
rate_hat <- 1/mean(isi_s)
scaling <- length(isi_s) / 10
hist(isi_s, breaks = seq(0, 310, 10))
lines(1:310, scaling * dexp(1:310, rate_hat))
breaks <- seq(0, 310, 10)
est <- dexp(breaks, rate_hat)
sum(est)
scaling
1/sum(est)
len(isi_s)/sum(est)
length(isi_s)/sum(est)
scaling <- length(isi_s) * 10
lines(1:310, scaling * dexp(breaks, rate_hat))
lines(breaks, scaling * dexp(breaks, rate_hat))
sum(est*scaling)
length(isi_s)
plot(res)
coef(res, s=0)
as.vector(coef(res, s=0))
as.vector(coef(res, s=0.1))
res <- cv.glmnet(expanded[, -1], expanded[, 1], family = "binomial", alpha = 0)
plot(res)
as.vector(coef(res, s=0.1))
plot(as.vector(coef(res, s=0.1)))
plot(as.vector(coef(res, s=0)))
dim(expanded)
create_ar_matrix <- function(x, order) {
n <- length(x) - order
ans <- matrix(0, n, order)
for (i in 1:n) {
ans[i, ] <- rev(x[i:(i+order - 1)])
}
ans
}
dim(create_ar_matrix(x[,1], 10))
expanded <- apply(binned, 1, function(v) create_ar_matrix(v, ord))
dim(expanded)
expanded <- apply(binned, 1, function(v) list(create_ar_matrix(v, ord)))
dim(expanded)
dim(expanded[[1]])
expanded[[1]]
dim(expanded[[1]])
expanded[[1]]
expanded[[1]][[1]]
dim(expanded[[1]][[1]])
unlist(expanded)
matrix(unlist(temp), ncol = 10)
temp <- apply(binned, 1, function(v) list(create_ar_matrix(v, ord)))
temp <- apply(t(binned), 1, function(v) create_ar_matrix(t(v), ord))
expanded <- apply(t(binned), 1, function(v) create_ar_matrix(t(v), ord))
dim(expanded)
expanded <- apply(t(binned), 2, function(v) create_ar_matrix(v, ord))
dim(expanded)
expanded <- apply(binned, 2, function(v) create_ar_matrix(v, ord))
dim(expanded)
help(apply)
expanded <- apply(binned, 2, function(v) as.vector(create_ar_matrix(v, ord)))
dim(expanded)
temp <- apply(binned, 2, function(v) as.vector(create_ar_matrix(v, ord)))
temp <- apply(binned, 1, function(v) as.vector(create_ar_matrix(v, ord)))
dim(temp)
dim(create_ar_matrix(x[,1], 10))
temp <- apply(binned, 1, function(v) as.vector(create_ar_matrix(v, ord)))
dim(temp)
dim(binned)
dim(create_ar_matrix(x[,1], 10))
dim(create_ar_matrix(binned[,1], ord))
temp <- apply(binned, 1, function(v) as.vector(create_ar_matrix(v, ord)))
dim(temp)
temp <- apply(binned[,1:2], 1, function(v) as.vector(create_ar_matrix(v, ord)))
temp <- apply(binned[1:2, ], 1, function(v) as.vector(create_ar_matrix(v, ord)))
dim(temp)
length(as.vector(create_ar_matrix(binned[,1], ord)))
temp <- apply(binned[1:2, ], 1, function(v) as.vector(create_ar_matrix(v, ord)))
dim(temp)
length(as.vector(create_ar_matrix(binned[1,], ord)))
temp <- apply(binned[1:2, ], 1, function(v) as.vector(create_ar_matrix(v, ord)))
dim(temp)
temp <- apply(binned, 1, function(v) as.vector(create_ar_matrix(v, ord)))
dim(temp)
temp <- t(apply(binned, 1, function(v) as.vector(create_ar_matrix(v, ord))))
dim(temp)
testt <- create_ar_matrix(binned[1,], ord)
temp <- t(apply(binned, 1, function(v) as.vector(create_ar_matrix(v, ord))))
dim(temp)
expanded <- matrix(temp, ncol = ord)
testt[1:10,]
expanded[1:10,]
expanded <- numeric(0)
for (i in 1:dim(binned)[1]) {
expanded <- rbind(expanded, create_ar_matrix(binned[i, ], ord))
}
dim(expanded)
res <- glm(expanded[, 1] ~ expanded[, -1], family = binomial)
coef(res)
plot(coef(res)[-1])
abline(0, 0)
seq <- binned[, sample(dim(binned[1]))]
seq
seq <- binned[, sample(dim(binned[1], 1))]
seq <- binned[, sample(dim(binned[1]1), 1)]
seq <- binned[, sample(dim(binned[1]), 1)]
seq <- binned[sample(dim(binned[1]), 1), ]
help(sample)
seq <- binned[sample(dim(binned)[1], 1), ]
seq
coeffs <- coef(res)
help(rbinom)
seq <- rep(0, 10)
for (i in 1:100) {
prev <- seq[(length(seq)-9):seq]
temp <- coeffs[1] + sum(coeffs[-1] * prev)
prob <- exp(temp)/(1+exp(temp))
new_y <- rbinom(1, prob, 1)
seq <- c(seq, new_y)
}
warnings()
prob
seq <- rep(0, 10)
prev <- seq[(length(seq)-9):seq]
prev
seq <- rep(0, 10)
for (i in 1:100) {
prev <- seq[(length(seq)-9):length(seq)]
temp <- coeffs[1] + sum(coeffs[-1] * prev)
prob <- exp(temp)/(1+exp(temp))
new_y <- rbinom(1, prob, 1)
seq <- c(seq, new_y)
}
seq <- rep(0, 10)
prev <- seq[(length(seq)-9):length(seq)]
temp <- coeffs[1] + sum(coeffs[-1] * prev)
length(coeffs)
prev <- seq[(length(seq)-ord+2):length(seq)]
temp <- coeffs[1] + sum(coeffs[-1] * prev)
prob <- exp(temp)/(1+exp(temp))
prob
new_y <- rbinom(1, prob, 1)
prob
new_y <- rbinom(1, 1, prob)
seq <- c(seq, new_y)
new_y
seq <- rep(0, 10)
for (i in 1:100) {
prev <- seq[(length(seq)-ord+2):length(seq)]
temp <- coeffs[1] + sum(coeffs[-1] * prev)
prob <- exp(temp)/(1+exp(temp))
new_y <- rbinom(1, 1, prob)
seq <- c(seq, new_y)
}
seq <- rep(0, 10)
for (i in 1:100) {
prev <- seq[(length(seq)-ord+2):length(seq)]
temp <- coeffs[1] + sum(coeffs[-1] * prev)
prob <- exp(temp)/(1+exp(temp))
new_y <- rbinom(1, 1, prob)
seq <- c(seq, new_y)
plot(seq, type="o")
}
seq <- rep(0, 10)
for (i in 1:100) {
prev <- seq[(length(seq)-ord+2):length(seq)]
temp <- coeffs[1] + sum(coeffs[-1] * prev)
prob <- exp(temp)/(1+exp(temp))
new_y <- rbinom(1, 1, prob)
seq <- c(seq, new_y)
}
plot(seq, type="o")
seq <- rep(0, 10)
for (i in 1:10000) {
prev <- seq[(length(seq)-ord+2):length(seq)]
temp <- coeffs[1] + sum(coeffs[-1] * prev)
prob <- exp(temp)/(1+exp(temp))
new_y <- rbinom(1, 1, prob)
seq <- c(seq, new_y)
}
plot(seq, type="o")
seq <- rep(0, 10)
for (i in 1:1000) {
prev <- seq[(length(seq)-ord+2):length(seq)]
temp <- coeffs[1] + sum(coeffs[-1] * prev)
prob <- exp(temp)/(1+exp(temp))
new_y <- rbinom(1, 1, prob)
seq <- c(seq, new_y)
}
plot(seq, type="o")
seq <- rep(0, 10)
for (i in 1:1000) {
prev <- seq[(length(seq)-ord+2):length(seq)]
temp <- coeffs[1] + sum(coeffs[-1] * prev)
prob <- exp(temp)/(1+exp(temp))
new_y <- rbinom(1, 1, prob)
seq <- c(seq, new_y)
}
plot(seq, type="l")
title("spikes")
seq_filt <- seq[500:1000]
temp <- which(seq[500:1000])
sim_isi_s <- temp[-1] - temp[length(temp)]
hist(sim_isi_s)
temp <- which(seq[500:1000])
sim_isi_s <- temp[-1] - temp[length(temp)]
hist(sim_isi_s)
sim_isi_s
sim_isi_s <- temp[-1] - temp[-length(temp)]
hist(sim_isi_s)
sim_isi_s
temp <- which(seq[500:1000])
sim_isi_s <- temp[-1] - temp[-length(temp)]
sim_isi_s
length(seq)
temp <- which(seq[500:1000])
temp <- which(seq[500:1000]==1)
sim_isi_s <- temp[-1] - temp[-length(temp)]
sim_isi_s
hist(sim_isi_s)
seq <- rep(0, 10)
nseq <- 10000
for (i in 1:nseq) {
prev <- seq[(length(seq)-ord+2):length(seq)]
temp <- coeffs[1] + sum(coeffs[-1] * prev)
prob <- exp(temp)/(1+exp(temp))
new_y <- rbinom(1, 1, prob)
seq <- c(seq, new_y)
}
plot(seq[500:1000], type="l")
title("spikes")
length(seq)
temp <- which(seq[500:nseq]==1)
sim_isi_s <- temp[-1] - temp[-length(temp)]
sim_isi_s
length(seq)
temp <- which(seq[500:nseq]==1)
sim_isi_s <- temp[-1] - temp[-length(temp)]
hist(sim_isi_s)
seq <- rep(0, 10)
nseq <- 100000
for (i in 1:nseq) {
prev <- seq[(length(seq)-ord+2):length(seq)]
temp <- coeffs[1] + sum(coeffs[-1] * prev)
prob <- exp(temp)/(1+exp(temp))
new_y <- rbinom(1, 1, prob)
seq <- c(seq, new_y)
}
plot(seq[500:1000], type="l")
title("spikes")
temp <- which(seq[500:nseq]==1)
sim_isi_s <- temp[-1] - temp[-length(temp)]
hist(sim_isi_s)
