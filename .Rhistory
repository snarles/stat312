pnorm(-4.11)
grid
res = 10
sz = 10
temp = -res:res
temp = -(res*sz):(res*sz)/res
res2 = 2*res+1
ggrid = cbind(rep(temp,each=res2),rep(temp,res2))
n = res2^2
rad = .5
res = 10
sz = 1
res2 = 2*res+1
temp = -(res*sz):(res*sz)/res
ggrid = cbind(rep(temp,each=res2),rep(temp,res2))
res = 100
sz = 1
res2 = 2*res+1
temp = -(res*sz):(res*sz)/res
ggrid = cbind(rep(temp,each=res2),rep(temp,res2))
sig = sum(abs(ggrid),1)
pospart = function(v) {
v[v < 0] = 0
return(v)
}
sig = pospart(rad-sum(abs(ggrid),1))
image(matrix(sig,res2,res2))
sum(abs(ggrid),1)
sig = pospart(rad-apply(abs(ggrid),1,sum))
image(matrix(sig,res2,res2))
rad = 1
sig = pospart(rad-apply(abs(ggrid),1,sum))
image(matrix(sig,res2,res2))
exp(1+1i)
ftsig = function(lambda) {
expi = exp(i*(ggrid %*% lambda))
sum(sig*expi)/res^2
}
lambdas0 = 0:10
length(lambdas0)
selffact = function(v) {
return(cbind(rep(v,each=length(v)),rep(v,length(v))))
}
lambdas = selffact(0:10)
sqshape = function(v) {
matrix(v,sqrt(length(v)),sqrt(length(v)))
}
fts = apply(lambdas,1,ftsig)
ftsig = function(lambda) {
expi = exp((0+1i)*(ggrid %*% lambda))
sum(sig*expi)/res^2
}
lambdas = selffact(0:10)
fts = apply(lambdas,1,ftsig)
image(sqshape(Re(fts)))
image(sqshape(Im(fts)))
pospart = function(v) {
v[v < 0] = 0
return(v)
}
ftsig = function(lambda) {
expi = exp((0+1i)*(ggrid %*% lambda))
sum(sig*expi)/res^2
}
selffact = function(v) {
return(cbind(rep(v,each=length(v)),rep(v,length(v))))
}
sqshape = function(v) {
matrix(v,sqrt(length(v)),sqrt(length(v)))
}
res = 100
sz = 1
res2 = 2*res+1
temp = -(res*sz):(res*sz)/res
ggrid = cbind(rep(temp,each=res2),rep(temp,res2))
xyg = selffact((0:res)/res)
mask = (xyg[,2] < (1-xyg[,1]))+0
image(mask)
image(sqshape(mask))
xyg = selffact((0:res)/res)
mask = (xyg[,2] <= (1-xyg[,1]))+0
image(sqshape(mask))
expi = exp((0+1i)*(xyg %*% lambda))
lambda = c(1,1)
xyg = selffact((0:res)/res)
mask = (xyg[,2] <= (1-xyg[,1]))+0
expi = exp((0+1i)*(xyg %*% lambda))
sigi = 1-apply(xyg,1,sum)
gxy = function(lambda) {
xyg = selffact((0:res)/res)
mask = (xyg[,2] <= (1-xyg[,1]))+0
expi = exp((0+1i)*(xyg %*% lambda))
sigi = 1-apply(xyg,1,sum)
return(sum(mask*expi*sigi)/(res^2))
}
lambda = c(1,1)
gxy(lambda)
gy = function(x,lambda2) {
ygd = (0:floor(res*(1-x)))/res
expi = exp((0+1i)*lambda2*ygd)
return(sum(ygd*expi)/res)
}
gy(.5,lambda[2])
xgd = (0:res)/res
t(xgd)
temp = apply(t(xgd),2,function(x) { gy(x,lambda[2])})
temp
gx = function(lambda) {
xgd = (0:res)/res
temp = apply(t(xgd),2,function(x) { gy(x,lambda[2])})
expi = exp((0+1i)*(lambda[1]*xgd))
return(sum(temp*expi)/res)
}
lambda = c(1,1)
gxy(lambda)
gx(lambda)
res = 100
lambda = c(1,1)
gxy(lambda)
gx(lambda)
res = 1000
lambda = c(1,1)
gxy(lambda)
gx(lambda)
gy = function(x,lambda2) {
ygd = (0:floor(res*(1-x)))/res
expi = exp((0+1i)*lambda2*ygd)
return(sum((1-x-ygd)*expi)/res)
}
res = 10
lambda = c(1,1)
gxy(lambda)
gx(lambda)
gy1 = function(x,lambda2) {
-(1-x)/lambda2 + exp((0+1i)*lambda2*(1-x)) - 1
}
x = .5
gy(x,lambda[2])
gy1(x,lambda[2])
a <- matrix(rnorm(1000),10,100)
a <- matrix(rnorm(100000),100,1000)
a <- rnorm(100000)
system.time(b <- matrix(a, 100, 1000))
system.time(for (ii in 1:1000) b <- matrix(a, 100, 1000))
system.time(for (ii in 1:1000) b <- t(b))
system.time(for (ii in 1:1000) a <- matrix(a, 100, 1000))
a <- rnorm(200000)
system.time(for (ii in 1:1000) a <- matrix(a, 200, 1000))
system.time(for (ii in 1:1000) a <- matrix(a, 400, 500))
system.time(for (ii in 1:1000) a <- matrix(a, 500, 400))
system.time(for (ii in 1:1000) a <- matrix(a, 1000, 200))
system.time(for (ii in 1:1000) a <- matrix(a, 2, 50000))
a <- rnorm(10000)
system.time(for (ii in 1:10000) a <- matrix(a, 100, 100))
a <- rnorm(1e8)
system.time(a <- matrix(a, 1e4, 1e4))
system.time(t(matrix(a, 1e4, 1e4)))
a <- rnorm(1e4)
a <- rnorm(1e8)
system.time(a <- matrix(a, 1, 1e8))
system.time(a <- t(a))
system.time(a <- t(a))
a <- rnorm(2 *1e8)
a <- matrix(a,1e8,2)
system.time(b <- a[,1])
system.time(b <- a[,1]; b <- t(t(b)))
system.time(b <- t(t(b)))
system.time(b <- a[, 1, drop=F])
setwd("~/stat312")
source("gauss_class.R")
library("R.matlab")
library('mvtnorm')
dat = readMat('ps3_realdata.mat')
# Just defining some numbers
neur = 97
train_trials = 728
test_trials = 728
nlab = 8
# training data
vecs = matrix(nr =length(dat$train.trial)/2, nc = neur)
for (i in seq(2,length(dat$train.trial),2)){
vecs[i/2,] = rowSums(dat$train.trial[i][[1]][,351:550])
}
dim(vecs)
labels = rep(1:8, each = 91)
rownames(vecs) <- paste(labels)
nlab = 8
# testing data
test_vecs = matrix(nr =length(dat$test.trial)/2, nc = neur)
for (i in seq(2,length(dat$test.trial),2)){
test_vecs[i/2,] = rowSums(dat$test.trial[i][[1]][,351:550])
}
dim(vecs)
length(labels)
728/8
#tr_dist <- dist(vecs[91*1:8, ])
tr_dist <- dist(vecs)
res_h <- hclust(tr_dist)
names(res_h)
plot(res_h)
res_h$order
max_K <- 30
results <- list(max_K)
for (i in 1:max_K) {
results[[i]] <- kmeans(vecs, centers = i)
}
plot(sapply(results, function(v) v$tot.withinss))
K <- 8
res <- results[[K]]
countmat <- matrix(0, 8, K)
for (i in 1:8) {
countmat[i, ] <- table(c(1:8, res$cluster[labels == i]))-1
}
best_trace <- 0
best_perm <- NULL
for (i in 1:10000) {
perm <- sample(8, 8, FALSE)
trr <- sum(diag(countmat[, perm]))
if (trr > best_trace) {
best_trace <- trr
best_perm <- perm
}
}
default_options <- options()
old_par <- par()
library(corrplot)
corrplot(countmat[, best_perm], is.corr=FALSE)
options(default_options)
par(old_par)
dmat <- as.matrix(tr_dist)
plot(svd(dmat)$d)
plot(svd(dmat)$d[1:10])
res <- svd(dmat[, 91*1:8])
dim(res$u)
dim(res$v)
plot(svd(dmat)$d[1:10])
plot(svd(dmat)$u[,], labels)
plot(svd(dmat)$u[,1], labels)
plot(svd(dmat)$d[1:10])
res <- svd(dmat)
plot(res$u[, 1], res$v[, 1], col = rainbow(8)[labels])
plot(res$u[, 1], res$u[, 1], col = rainbow(8)[labels])
plot(res$u[, 1], res$u[, 2], col = rainbow(8)[labels])
plot(res$u[, 2], res$u[, 3], col = rainbow(8)[labels])
tr_dist <- dist(t(vecs))
res_h <- hclust(tr_dist)
names(res_h)
plot(res_h)
heatmap(vecs)
?heatmap
heatmap(vecs, Rowv = NA)
locator(1)
locator(1)
heatmap(vecs, Rowv = NA, ylim = c(0, 1))
heatmap(matrix(0:25, 5, 5))
heatmap(matrix(1:25, 5, 5))
heatmap(matrix(0:1, 5, 5))
heatmap(matrix(rep(0:1, 8), 4, 4))
rep(0:1, 8)
matrix(rep(0:1, 8), 4, 4)
heatmap(matrix(rnorm(16), 4, 4))
locator(1)
locator(1)
heatmap
heatmap(vecs, Rowv = NA)
