dim(feature_train[,3])
dim(feature_train[,0])
dim(feature_train[0,])
dim(feature_train[1,])
dim(feature_train)
dim(feature_train[1740,10000])
View(feature_train)
View(feature_train)
train_lasso=cv.glmnet(x = feature_train, y = train_resp[,voxel])
train_lasso <- cv.glmnet(x = feature_train, y = train_resp[,voxel], alpha = 1)
lasso <- train_lasso
lasso$lambda.min
lasso$lambda.min
plot(res)
plot(lasso)
lasso$lambda.min
plot(lasso)
res <- lasso
plot(res)
beta_vec <- coef(res, s = lasso$lambda.min)
plot(beta_vec)
beta_vec <- coef(res, s = lasso$lambda.1se)
plot(beta_vec)
beta_vec <- coef(res, s = lasso$lambda.min)
plot(beta_vec)
l <- lasso$lambda.min
beta_vec <- coef(res, s = l)
y_predict=predict(res, s = l)
y_predict=predict(res,valid_stim, s = l)
load("/Users/Nora/Desktop/classes/stat312/EX3Data/feature_valid.RData")
load("/Users/Nora/Desktop/classes/stat312/EX3Data/valid_resp.RData")
y_predict=predict(res,valid_stim, s = l)
y_predict=predict(res,valid_resp, s = l)
y_predict=predict(res,feature_valid, s = l)
plot(y_predict)
plot(valid_resp[,voxel])
scatter(y_predict, valid_resp[,voxel])
plot(y_predict, valid_resp[,voxel])
plot(c(-2,2), c(-2,2))
plot(y_predict, valid_resp[,voxel])
line(c(-2,2), c(-2,2))
lines(c(-2,2), c(-2,2))
plot(y_predict, type='o')
lines(valid_resp[,voxel])
plot(y_predict, type='o', col='red')
lines(valid_resp[,voxel])
View(wav.pyr)
plot(res)
plot(beta_vec)
linear_filter=wav.pyr.plx*beta_vec;
dim(wav.pyr.plx)
dim(wav.pyr)
dim(wav.pyr*beta_vec)
dim(wav.pyr*beta_vec[:-1])
dim(wav.pyr*beta_vec[1,-1])
dim(beta_vec[1,-1])
dim(beta_vec[1:end])
dim(beta_vec)
dim(beta_vec[1:3,])
dim(beta_vec[,1:3])
dim(beta_vec[,1])
dim(beta_vec[ ,1])
dim(beta_vec[ 1:3 , ])
filter <- wav.pyr * beta_vec ;
filter <- wav.pyr %*% beta_vec ;
a <- beta_vec[1:10921];
dim(a)
size(a)
filter <- wav.pyr %*% a ;
filter <- wav.pyr %*% beta_vec[1:10921] ;
sqrt(10921)
sqrt(16384)
filter <- matrix(filter, nrow=128, byrow=TRUE)
image(filter)
image.plot(filter)
filter <- wav.pyr %*% beta_vec[1:10921] ;
image(filter)
image(real(filter))
image(norm(filter))
image(abs(filter))
filter <- wav.pyr %*% beta_vec[1:10921] ;
filter <- matrix(filter, nrow=128, byrow=TRUE)
image(abs(filter))
filter <- wav.pyr %*% beta_vec[2:10922] ;
filter <- matrix(filter, nrow=128, byrow=TRUE)
image(abs(filter))
filter <- wav.pyr %*% beta_vec[2:10922] ;
filter <- matrix(filter, nrow=128, byrow=FALSE)
image(abs(filter))
filter <- wav.pyr %*% beta_vec[1:10921] ;
filter <- matrix(filter, nrow=128, byrow=FALSE)
image(abs(filter))
image(abs(filter), col = heat.colors(12))
image(abs(filter), col = heat.colors(1\))
image(abs(filter), col = heat.colors(1))
image(abs(filter), col = heat.colors
image(abs(filter), col = heat.colors)
image(abs(filter))
filter <- wav.pyr %*% beta_vec[1:10921] ;
filter <- matrix(filter, nrow=128, byrow=TRUE)
image(abs(filter))
filter <- wav.pyr %*% beta_vec[1:10921] ;
filter <- matrix(filter, nrow=128, byrow=FALSE)
image(abs(filter))
min(res$cvm)
i
# Try to find the best voxel ------------
for (voxel in 1:15){
i
res <- cv.glmnet(x = feature_train, y = train_resp[,voxel], alpha = 1, type.measure="mse")
mse[voxel] <- min(res$cvm)
}
for (voxel in 1:15){
i
res <- cv.glmnet(x = feature_train, y = train_resp[,voxel], alpha = 1, type.measure="mse")
mse[voxel] <- min(res$cvm)
}
for (voxel in 1:15){
voxel
res <- cv.glmnet(x = feature_train, y = train_resp[,voxel], alpha = 1, type.measure="mse")
mse[voxel] <- min(res$cvm)
}
mse <- 1:15
mse <- seq(0,15)
mse <- seq(NA,15)
mse <- matrix(NA,15)
for (voxel in 1:15){
voxel
res <- cv.glmnet(x = feature_train, y = train_resp[,voxel], alpha = 1, type.measure="mse")
mse[voxel] <- min(res$cvm)
}
for (voxel in 1:15){
print(voxel)
res <- cv.glmnet(x = feature_train, y = train_resp[,voxel], alpha = 1, type.measure="mse")
mse[voxel] <- min(res$cvm)
}
mse <- matrix(NA,15)
for (voxel in 1:15){
print(voxel)
res <- cv.glmnet(x = feature_train, y = train_resp[,voxel], alpha = 1, type.measure="mse")
mse[voxel] <- min(res$cvm)
}
hist(mse)
source('~/.active-rstudio-document', echo=TRUE)
which.min(mse)
hist(mse)
best_voxel = which.min(mse)
best_voxel
res <- cv.glmnet(x = feature_train, y = train_resp[,best_voxel], alpha = 1, type.measure="mse")
plot(res)
n_valid = 120
l <- lasso$lambda.min
beta_vec <- coef(res, s = l)
plot(beta_vec)
l <- res$lambda.min
beta_vec <- coef(res, s = l)
plot(beta_vec)
plot(res)
l <- res$lambda.min
beta_vec <- coef(res, s = l)
plot(beta_vec)
filter <- wav.pyr %*% beta_vec[1:10921] ;
filter <- matrix(filter, nrow=128, byrow=FALSE)
image(abs(filter))
filter <- wav.pyr %*% beta_vec[2:10922] ;
filter <- matrix(filter, nrow=128, byrow=FALSE)
image(abs(filter))
filter <- wav.pyr %*% beta_vec[1:10921] ;
filter <- matrix(filter, nrow=128, byrow=FALSE)
image(abs(filter))
y_predict <- predict(res,feature_valid, s = l)
plot(y_predict, valid_resp[,voxel])
lines(valid_resp[,best_voxel])
plot(y_predict, type='o', col='red')
lines(valid_resp[,best_voxel])
plot(y_predict, valid_resp[,best_voxel])
lines(c(-2,2), c(-2,2))
clear
# Data and library loading --------------
library("glmnet")
load("/Users/Nora/Desktop/classes/stat312/EX3Data/wavpyr.RData")
load("/Users/Nora/Desktop/classes/stat312/EX3Data/feature_train.RData")
load("/Users/Nora/Desktop/classes/stat312/EX3Data/feature_valid.RData")
load("/Users/Nora/Desktop/classes/stat312/EX3Data/train_resp.RData")
load("/Users/Nora/Desktop/classes/stat312/EX3Data/train_stim.RData")
load("/Users/Nora/Desktop/classes/stat312/EX3Data/valid_resp.RData")
# load("/Users/Nora/Desktop/classes/stat312/EX3Data/valid_stim.RData")
# Data and library loading --------------
ptm <- proc.time()
library("glmnet")
load("/Users/Nora/Desktop/classes/stat312/EX3Data/wavpyr.RData")
load("/Users/Nora/Desktop/classes/stat312/EX3Data/feature_train.RData")
load("/Users/Nora/Desktop/classes/stat312/EX3Data/feature_valid.RData")
load("/Users/Nora/Desktop/classes/stat312/EX3Data/train_resp.RData")
# load("/Users/Nora/Desktop/classes/stat312/EX3Data/train_stim.RData")
load("/Users/Nora/Desktop/classes/stat312/EX3Data/valid_resp.RData")
# load("/Users/Nora/Desktop/classes/stat312/EX3Data/valid_stim.RData")
proc.time()-ptm
# Set a few constants ------------
n_train = 1750
n_valid = 120
n_voxel = 15
# Find the best voxel or else just choose a voxel ------------
ptm <- proc.time()
mse <- matrix(NA,n_voxel)
for (voxel in 1:n_voxel){
print(voxel)
res <- cv.glmnet(x = feature_train, y = train_resp[,voxel], alpha = 1, type.measure="mse")
mse[voxel] <- min(res$cvm)
}
hist(mse)
voxel = which.min(mse)
proc.time()-ptm # This took
850/60
voxel
# lasso is alpha = 1, ridge is alpha = 0
# Fit model for a selected voxel --------
ptm <- proc.time()
# lasso is alpha = 1, ridge is alpha = 0
res <- cv.glmnet(x = feature_train, y = train_resp[,voxel], alpha = 1, type.measure="mse")
proc.time()-ptm
# Look at model detail -----------------
plot(res)
l <- res$lambda.min
beta_vec <- coef(res, s = l)
plot(beta_vec)
# Look at filters -------
filter <- wav.pyr %*% beta_vec[1:10921] ;
filter <- matrix(filter, nrow=128, byrow=FALSE)
image(abs(filter))
# Look at predictions ----------
y_predict <- predict(res,feature_valid, s = l)
# Scatter plot
plot(y_predict, valid_resp[,voxel])
lines(c(-2,2), c(-2,2))
# Comparison
plot(y_predict, type='o', col='red')
lines(valid_resp[,voxel])
# Data loading ---------
load("/Users/Nora/Desktop/classes/stat312/Ex3/wavpyr.RData")
# featureAttr <- read.csv(file='/Users/Nora/Desktop/classes/stat312/Ex4/featAttr.csv')
# load("/Users/Nora/Desktop/classes/stat312/Ex4")
image(wav.pyr[1:100,1:100])
image(wav.pyr[1:100,1:100])
dim(wav.pyr[1:100,1:100])
image(wav.pyr[1:100,1:100])
image(real(wav.pyr[1:100,1:100]))
image(re(wav.pyr[1:100,1:100]))
image(norm(wav.pyr[1:100,1:100]))
a<-norm(wav.pyr[1:100,1:100])
a<-abs(wav.pyr[1:100,1:100])
a<-im(wav.pyr[1:100,1:100])
a<-Re(wav.pyr[1:100,1:100])
image(a)
image(Re(wav.pyr[1:100,1:100]))
image(Re(wav.pyr[1:1000,1:1000]))
dim(sum(Re(wav.pyr[1:1000,1:1000])))
dim(sum(Re(wav.pyr[1:1000,1:1000])))
??sum
dim(colSums(Re(wav.pyr[1:1000,1:1000])))
norm(wav.pyr[,1])
dim(wav.pyr[,1])
dim(wav.pyr[,2])
dim(wav.py)
dim(wav.pyr)
dim(wav.pyr[1,])
dim(wav.pyr[1,:])
dim(wav.pyr[-1,])
dim(wav.pyr[1,])
dim(wav.pyr[2,])
dim(wav.pyr[2,1])
wav.pyr[2,1
wav.pyr[2,1]
wav.pyr[2,1]
plot(wav.pyr[2,])
dim(wav.pyr[2,])
dim(Re(wav.pyr[2,]))
plot(Re(wav.pyr[2,]))
plot(Re(wav.pyr[,1]))
norm(Re(wav.pyr[,1]))
sum(Re(wav.pyr[,1]))
sum(Re(wav.pyr[,2]))
sum(Re(wav.pyr[,3]))
sum(norm(wav.pyr[,2]))
sum(abs(wav.pyr[,2]))
sum(abs(wav.pyr[,1]))
sum(abs(wav.pyr[,3]))
sum(abs(wav.pyr[,4]))
sum(abs(wav.pyr[,5]))
??reshape
image(matrix(Re(wav.pyr[,1]), nrow=128, ncol=128))
image(matrix(Im(wav.pyr[,1]), nrow=128, ncol=128))
image(matrix(Im(wav.pyr[,2]), nrow=128, ncol=128))
image(matrix(Im(wav.pyr[,3]), nrow=128, ncol=128))
image(matrix(Im(wav.pyr[,4]), nrow=128, ncol=128))
image(matrix(Im(wav.pyr[,5]), nrow=128, ncol=128))
image(matrix(Im(wav.pyr[,6]), nrow=128, ncol=128))
image(matrix(Im(wav.pyr[,7]), nrow=128, ncol=128))
image(matrix(Im(wav.pyr[,8]), nrow=128, ncol=128))
image(matrix(Im(wav.pyr[,9]), nrow=128, ncol=128))
image(matrix(Im(wav.pyr[,10]), nrow=128, ncol=128))
image(matrix(Im(wav.pyr[,11]), nrow=128, ncol=128))
image(matrix(Im(wav.pyr[,12]), nrow=128, ncol=128))
image(matrix(Im(wav.pyr[,17]), nrow=128, ncol=128))
image(matrix(Im(wav.pyr[,18]), nrow=128, ncol=128))
image(matrix(Im(wav.pyr[,24]), nrow=128, ncol=128))
image(matrix(Im(wav.pyr[,25]), nrow=128, ncol=128))
image(matrix(Im(wav.pyr[,26]), nrow=128, ncol=128))
8*4
8*5
image(matrix(Im(wav.pyr[,41]), nrow=128, ncol=128))
image(matrix(Im(wav.pyr[,42]), nrow=128, ncol=128))
1+8+4*8+16*8+16*4*8+16*16*8
load("/Users/Nora/Desktop/classes/stat312/EX3Data/feature_valid.RData")
load("/Users/Nora/Desktop/classes/stat312/Ex3/feature_valid.RData")
plot(feature_valid)
dim(feature_valid)
plot(feature_valid[1,])
plot(feature_valid[1,],type='l')
plot(feature_valid[2,],type='l')
plot(feature_valid[3,],type='l')
plot(feature_valid[4,],type='l')
plot(feature_valid[4,0:1000],type='l')
plot(feature_valid[4,0:41],type='l')
2+2**3+2**5
2+2**3+2**5+2**7+2**9+2**11
2**11
2**9
2**7
2**5
plot(feature_valid[4,0:45],type='l')
plot(feature_valid[4,0:100],type='l')
plot(feature_valid[4,0:500],type='l')
plot(feature_valid[4,0:175],type='l')
plot(feature_valid[4,0:178],type='l')
plot(feature_valid[4,0:200],type='l')
help c
??c
help c
help
1:10
# Choose features ------
# Not sure how to do this so lets plug in random
features <- 0:41
load("/Users/Nora/Desktop/classes/stat312/Ex3/feature_train.RData")
dim(feature_train)
X=feature_train[,features]
dim(transpose(X))
load("/Users/Nora/Desktop/classes/stat312/Ex3/train_resp.RData")
# Not sure how to do this so lets plug in random
X=feature_train[,features]
beta <- solve(t(X)%*%X)%*%t(X)%*%train_resp
plot(beta[,1])
plot(beta[,2])
plot(beta[,3])
plot(beta[,4])
sum(beta[vertical_features,])
horizontal_features <- 21:41
beta <- solve(t(X)%*%X)%*%t(X)%*%train_resp
sum(beta[vertical_features,])
vertical_features <-1:20
sum(beta[vertical_features,])
colSum(beta[vertical_features,])
colSums(beta[vertical_features,])
colSums(beta[vertical_features,]**2)
verticalness<-colSums(beta[vertical_features,]**2)
horizontalness<-colSums(beta[horizontal_features,]**2)
test_statistic=verticalness/horizontalness
test_statistic=verticalness-horizontalness
resid <- X %*% beta - train_resp
plot(resid)
plot(resid[,1])
std(resid[,1])
stddev(resid[,1])
var(resid[,1])
mean(resid[,1])
mean(resid[,2])
var(resid[,2])
var(resid)
dim(var(resid))
dim(diag(var(resid))
)
dim(diag(var(resid)))
diag(var(resid))
eps <- mean(diag(var(resid)))
eps
pnorm(test_statistic)
hist(test_statistic)
verticalness<-colSums(abs(beta[vertical_features,]))
horizontalness<-colSums(abs(beta[horizontal_features,]))
test_statistic=verticalness-horizontalness
# Null distribution should have mean 0, variance = 42 * eps
resid <- X %*% beta - train_resp
eps <- mean(diag(var(resid)))
pnorm(test_statistic)
plot(pnorm(test_statistic))
hist(pnorm(test_statistic))
featureAttr <- read.csv(file='/Users/Nora/Desktop/classes/stat312/Ex4/featAttr.csv')
View(featureAttr)
size(featureAttr)
dim(featureAttr)
plot(featureAttr[1,])
plot(featureAttr[1,])
plot(featureAttr[1,])
plot(featureAttr[1,1:100])
plot(featureAttr[1,1:100])
size(featureAttr[1,1:100])
dim(featureAttr[1,1:100])
plot(featureAttr[1,1:100])
par(mar = rep(2, 4))
plot(featureAttr[1,1:100])
plot(featureAttr[1,1:100])
plot(featureAttr[1,1:100])
plot(featureAttr[1,1:100])
plot(featureAttr[1,1:100])
plot(featureAttr[1,1:100])
plot(featureAttr[1,1:100])
plot(featureAttr[1,1:100])
plot(featureAttr[1:100,])
plot(featureAttr[1:100,1])
plot(featureAttr[1,1:100])
plot(t(featureAttr[1,1:100]))
plot(t(featureAttr[1,]))
library('car')
library('pdist')
load('ex4.RData')
setwd('Desktop/classes/stats321')
setwd('Desktop/classes/stats312')
setwd('Desktop/classes/stat312')
load('ex4.RData')
for (vox in 1:nvoxels) {
res <- lm(train_resp[, vox] ~ X)
res2 <- linearHypothesis(res, t(contrast_vec))
pvs[vox] <- res2$'Pr(>F)'[2]
}
contrast_vec <- c(0, -1 * vertical_features +
1 * horizontal_features)
nvoxels <- dim(train_resp)[2]
pvs <- numeric(nvoxels)
for (vox in 1:nvoxels) {
res <- lm(train_resp[, vox] ~ X)
res2 <- linearHypothesis(res, t(contrast_vec))
pvs[vox] <- res2$'Pr(>F)'[2]
}
plot(1:nvoxels/nvoxels, sort(pvs), main="P-P Plot", xlab="Uniform", ylab="Calculated")
lines(0:1,0:1)
a=matrix(10,10)
a=matrix(10)
a=matrix(1:10,1:10)
a=matrix(0,10,10)
max(vl[1,])
max(vl[,1])
max(vl[,2])
min(vl[,2])
min(vl[,1])
a=matrix(0,60,60)
a[vl] <- pvs
image(a)
plot(vl[,1], vl[,2], col='grey')
points(vl[pvs < .1, ], col='red')
a[vl[,1], vl[,2]] <- pvs
image(a)
View(a)
View(a)
for i in (1:nvoxels){}
for i in (1:nvoxels){}
for i in (1:nvoxels){ a[vl[i,1],vl[i,2]] <- pvs[i] }
clear a
#---------
for i in (1:nvoxels){
a[vl[i,1],vl[i,2]] <- pvs[i]
}
#---------
a=matrix(0,60,60)
for (i in 1:nvoxels){
a[vl[i,1],vl[i,2]] <- pvs[i]
}
image(a)
a=matrix(-1,60,60)
#---------
a=matrix(-1,60,60)
for (i in 1:nvoxels){
a[vl[i,1],vl[i,2]] <- pvs[i]
}
image(a)
#---------
a=matrix(-0.1,60,60)
for (i in 1:nvoxels){
a[vl[i,1],vl[i,2]] <- pvs[i]
}
image(a)
#---------
a=matrix(1,60,60)
for (i in 1:nvoxels){
a[vl[i,1],vl[i,2]] <- pvs[i]
}
image(a)
image(a, axes=FALSE)
points(vl[pvs < .1, ], col='red')
plot(vl[,1], vl[,2], col='grey')
points(vl[pvs < .1, ], col='red')
points(vl[pvs < .1, 1],vl[pvs < .1, 2], col='green')
a[5:,5:]
dim(a[-5,-5])
dim(a[5:end,5:end])
min(vl[,1])
min(vl[,2])
max(vl[,2])
max(vl[,1])
load(p_min.RData)
load('p_min.RData')
load('p_min.RData')
